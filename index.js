// Generated by LiveScript 1.6.0
(function(){
  var superagent, ref$, map, find, split, filter, objToPairs, pairsToObj, requireLs, moment, config, baseUrl, buildRequest, checkField, isMissingError, buildApi, toString$ = {}.toString;
  superagent = require('superagent');
  ref$ = require('prelude-ls'), map = ref$.map, find = ref$.find, split = ref$.split, map = ref$.map, filter = ref$.filter, objToPairs = ref$.objToPairs, pairsToObj = ref$.pairsToObj;
  requireLs = require('require-ls');
  moment = require('moment');
  config = require('./config.ls');
  baseUrl = 'https://coinpay.org.ua/api/v1';
  buildRequest = function(privateKey, cb){
    var post, get;
    post = function(url, data, cb){
      return superagent.post(baseUrl + "/" + url, data).set('Authorization', "Bearer " + privateKey).end(function(err, res){
        if (err != null) {
          return cb(err);
        }
        if (res.status > 300) {
          return cb(res.data);
        }
        return cb(null, res.data);
      });
    };
    get = function(url, data, cb){
      return superagent.get(baseUrl + "/" + url).set('Authorization', "Bearer " + privateKey).end(function(err, res){
        if (err != null) {
          return cb(err);
        }
        if (res.status > 300) {
          return cb(res.data);
        }
        return cb(null, res.data);
      });
    };
    return cb(null, {
      post: post,
      get: get
    });
  };
  checkField = curry$(function(data, item){
    var found;
    if (item.indexOf('|') === -1 && toString$.call(data[item]).slice(8, -1) !== 'String') {
      return true;
    }
    found = find(function(it){
      return toString$.call(data[it]).slice(8, -1) === 'String';
    })(
    split('|')(
    item));
    if (found == null) {
      return true;
    }
    return false;
  });
  isMissingError = function(arr, data){
    return function(it){
      if (it === "") {
        return null;
      } else {
        return it;
      }
    }(
    join(",")(
    filter(checkField(data))(
    arr)));
  };
  buildApi = function(privateKey){
    return function(arg$){
      var name, config, func;
      name = arg$[0], config = arg$[1];
      func = function(data, cb){
        var err;
        err = isMissingError(config.params, data);
        if (err != null) {
          return cb(err);
        }
        return buildRequest(privateKey, function(err, http){
          if (err != null) {
            return cb(err);
          }
          return http[config.method](config.query, data, cb);
        });
      };
      return [name, func];
    };
  };
  module.exports = function(privateKey){
    return pairsToObj(
    map(buildApi(privateKey))(
    objToPairs(
    config)));
  };
  function curry$(f, bound){
    var context,
    _curry = function(args) {
      return f.length > 1 ? function(){
        var params = args ? args.concat() : [];
        context = bound ? context || this : this;
        return params.push.apply(params, arguments) <
            f.length && arguments.length ?
          _curry.call(context, params) : f.apply(context, params);
      } : f;
    };
    return _curry();
  }
}).call(this);
